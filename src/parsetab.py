
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARROW AS ASIGDIV ASIGMINUS ASIGSUM ASIGTIMES ASSERT ASSIGN ASYNC AWAIT BOOLEAN BREAK CASE CATCH CLASS COMMA CONST CONTINUE DDOTS DIVISION DO DOT DOUBLE_TYPE DYNAMIC ELSE ENUM EQ EQ_V EXPORT EXTENDS FALSE FINALLY FLOAT FOR FUNCTION GT GTE IDENT IF IMPLEMENTS INT INTERFACE INT_TYPE LBRACE LBRACKET LIST LPAREN LT LTE MAP MINUS MINUSMINUS MOD NE NEGATION OR PLUS PLUSPLUS PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON SET STRING STRING_TYPE SUPER SWITCH TIMES TRUE TYPEDEF VAR VIR VOID WHILEbody : forstmtforstmt : FOR LPAREN INT_TYPE assign SEMICOLON comparisonint SEMICOLON varincredecre RPAREN LBRACE RBRACE\n    assign : IDENT EQ_V INT\n    comparisonint : IDENT comparisonop INT\n    varincredecre : incredecre IDENT\n                                     | IDENT incredecre\n    incredecre : PLUSPLUS\n                              | MINUSMINUS\n    comparisonop : EQ\n                        | GT\n                        | GTE\n                        | LT\n                        | LTE\n                        | NE\n    '
    
_lr_action_items = {'FOR':([0,],[3,]),'$end':([1,2,31,],[0,-1,-2,]),'LPAREN':([3,],[4,]),'INT_TYPE':([4,],[5,]),'IDENT':([5,8,13,22,24,25,],[7,11,23,28,-7,-8,]),'SEMICOLON':([6,10,12,26,],[8,13,-3,-4,]),'EQ_V':([7,],[9,]),'INT':([9,14,15,16,17,18,19,20,],[12,26,-9,-10,-11,-12,-13,-14,]),'EQ':([11,],[15,]),'GT':([11,],[16,]),'GTE':([11,],[17,]),'LT':([11,],[18,]),'LTE':([11,],[19,]),'NE':([11,],[20,]),'PLUSPLUS':([13,23,],[24,24,]),'MINUSMINUS':([13,23,],[25,25,]),'RPAREN':([21,24,25,28,29,],[27,-7,-8,-5,-6,]),'LBRACE':([27,],[30,]),'RBRACE':([30,],[31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'forstmt':([0,],[2,]),'assign':([5,],[6,]),'comparisonint':([8,],[10,]),'comparisonop':([11,],[14,]),'varincredecre':([13,],[21,]),'incredecre':([13,23,],[22,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> forstmt','body',1,'p_body','andrew_yacc.py',15),
  ('forstmt -> FOR LPAREN INT_TYPE assign SEMICOLON comparisonint SEMICOLON varincredecre RPAREN LBRACE RBRACE','forstmt',11,'p_forstmt','andrew_yacc.py',18),
  ('assign -> IDENT EQ_V INT','assign',3,'p_assign','andrew_yacc.py',23),
  ('comparisonint -> IDENT comparisonop INT','comparisonint',3,'p_comparisonint','andrew_yacc.py',28),
  ('varincredecre -> incredecre IDENT','varincredecre',2,'p_varincredecre','andrew_yacc.py',33),
  ('varincredecre -> IDENT incredecre','varincredecre',2,'p_varincredecre','andrew_yacc.py',34),
  ('incredecre -> PLUSPLUS','incredecre',1,'p_incredecre','andrew_yacc.py',39),
  ('incredecre -> MINUSMINUS','incredecre',1,'p_incredecre','andrew_yacc.py',40),
  ('comparisonop -> EQ','comparisonop',1,'p_comparisonop','andrew_yacc.py',45),
  ('comparisonop -> GT','comparisonop',1,'p_comparisonop','andrew_yacc.py',46),
  ('comparisonop -> GTE','comparisonop',1,'p_comparisonop','andrew_yacc.py',47),
  ('comparisonop -> LT','comparisonop',1,'p_comparisonop','andrew_yacc.py',48),
  ('comparisonop -> LTE','comparisonop',1,'p_comparisonop','andrew_yacc.py',49),
  ('comparisonop -> NE','comparisonop',1,'p_comparisonop','andrew_yacc.py',50),
]
